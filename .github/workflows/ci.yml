name: CI Security Pipeline for Python

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-scan:
    name: Build and Security Scan

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Если используешь другие менеджеры — раскомментируй нужное:
          # pip install -e .           # для setup.py
          # pip install poetry && poetry install --no-dev  # для poetry

      - name: Run SAST Scan (Bandit)
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || echo "Bandit found issues (exit code 1 is expected if issues found)"
        continue-on-error: true  # Чтобы не падать при найденных проблемах (аналогично SpotBugs)

      - name: Run SCA Scan (OWASP Dependency-Check)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project-name: "Python Project"
          fail-on-cvss: 0  # Позволяем завершиться успешно, чтобы загрузить отчёт
          out: "dependency-check-report"
          format: "HTML, JSON"
          # Опционально: используем API-ключ NVD (если есть)
          nvd.apiKey: ${{ secrets.NVD_API_KEY }}

      - name: Upload Bandit SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-sast-report
          path: bandit-report.json

      - name: Upload OWASP Dependency-Check SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-sca-report
          path: dependency-check-report/
