# .github/workflows/dependency‑check.yml
name: Dependency‑Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣  Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣  (Опционально) Очистить кеш Dependency‑Check,
      #     чтобы убедиться, что используется свежая база NVD.
      - name: Clear Dependency‑Check cache
        run: rm -rf ~/.dependency-check/data

      # 3️⃣  Скачать и распаковать последнюю стабильную версию
      - name: Download Dependency‑Check
        run: |
          wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip
          unzip -q dependency-check-10.0.2-release.zip

      # 4️⃣  Запуск сканера
      #     • --format HTML – получаем удобный отчёт  
      #     • --project – имя репозитория  
      #     • --out .   – сохраняем в корень рабочего каталога  
      #     • --nvdApiKey – токен, если он у вас есть (можно опустить)  
      #     • --nvdApiDelay 6000 – снизить нагрузку на NVD (6 сек.)  
      - name: Run Dependency‑Check
        run: |
          ./dependency-check/bin/dependency-check.sh \
            --scan . \
            --format HTML \
            --project "${{ github.repository }}" \
            --out . \
            ${{ secrets.NVD_API_KEY && '--nvdApiKey ${{ secrets.NVD_API_KEY }}' }} \
            --nvdApiDelay 6000
        env:
          # Достаточно указать пределы памяти; остальные параметры не требуются
          JAVA_TOOL_OPTIONS: "-Xms2g -Xmx4g"

      # 5️⃣  Сохранить HTML‑отчёт как артефакт
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report.html
